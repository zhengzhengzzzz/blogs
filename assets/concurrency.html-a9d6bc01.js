const t=JSON.parse('{"key":"v-fc1e33da","path":"/posts/cross-platform/Flutter/concurrency.html","title":"Dart 中的并发","lang":"zh-CN","frontmatter":{"title":"Dart 中的并发","icon":"asynchronous","date":"2023-04-26T00:00:00.000Z","cover":"https://w.wallhaven.cc/full/72/wallhaven-7286w9.png","category":["Flutter","Dart"],"tag":["Dart"],"description":"Dart 通过 async-await、isolate 以及一些异步类型概念（例如 Future 和 Stream）支持了并发代码编程。本篇文章会对 async-await、Future 和 Stream 进行简略的介绍，而侧重点放在 isolate 的讲解上。 在应用中，所有的 Dart 代码都在 isolate 中运行。每一个 Dart 的 isolate 都有独立的运行线程，它们无法与其他 isolate 共享可变对象。在需要进行通信的场景里，isolate 会使用消息机制。很多 Dart 应用都只使用一个 isolate，也就是 main isolate。你可以创建额外的 isolate 以便在多个处理器核心上执行并行代码。","head":[["meta",{"property":"og:url","content":"https://oragekk.me/blogs/posts/cross-platform/Flutter/concurrency.html"}],["meta",{"property":"og:site_name","content":"茜茜的博客"}],["meta",{"property":"og:title","content":"Dart 中的并发"}],["meta",{"property":"og:description","content":"Dart 通过 async-await、isolate 以及一些异步类型概念（例如 Future 和 Stream）支持了并发代码编程。本篇文章会对 async-await、Future 和 Stream 进行简略的介绍，而侧重点放在 isolate 的讲解上。 在应用中，所有的 Dart 代码都在 isolate 中运行。每一个 Dart 的 isolate 都有独立的运行线程，它们无法与其他 isolate 共享可变对象。在需要进行通信的场景里，isolate 会使用消息机制。很多 Dart 应用都只使用一个 isolate，也就是 main isolate。你可以创建额外的 isolate 以便在多个处理器核心上执行并行代码。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://w.wallhaven.cc/full/72/wallhaven-7286w9.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-24T08:54:35.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Dart 中的并发"}],["meta",{"property":"article:author","content":"茜茜"}],["meta",{"property":"article:tag","content":"Dart"}],["meta",{"property":"article:published_time","content":"2023-04-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-24T08:54:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dart 中的并发\\",\\"image\\":[\\"https://w.wallhaven.cc/full/72/wallhaven-7286w9.png\\"],\\"datePublished\\":\\"2023-04-26T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-24T08:54:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"茜茜\\",\\"url\\":\\"https://orgaekk.me\\"}]}"]]},"headers":[{"level":2,"title":"异步的类型和语法","slug":"异步的类型和语法","link":"#异步的类型和语法","children":[{"level":3,"title":"Future 和 Stream 类型","slug":"future-和-stream-类型","link":"#future-和-stream-类型","children":[]},{"level":3,"title":"async-await 语法","slug":"async-await-语法","link":"#async-await-语法","children":[]}]},{"level":2,"title":"Isolate 的工作原理","slug":"isolate-的工作原理","link":"#isolate-的工作原理","children":[{"level":3,"title":"主 isolate","slug":"主-isolate","link":"#主-isolate","children":[]},{"level":3,"title":"Isolate 的生命周期","slug":"isolate-的生命周期","link":"#isolate-的生命周期","children":[]},{"level":3,"title":"事件处理","slug":"事件处理","link":"#事件处理","children":[]},{"level":3,"title":"后台运行对象","slug":"后台运行对象","link":"#后台运行对象","children":[]}]},{"level":2,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[{"level":3,"title":"实现一个简单的 isolate 工作对象","slug":"实现一个简单的-isolate-工作对象","link":"#实现一个简单的-isolate-工作对象","children":[]},{"level":3,"title":"实现一个简单的 isolate 工作对象","slug":"实现一个简单的-isolate-工作对象-1","link":"#实现一个简单的-isolate-工作对象-1","children":[]}]},{"level":2,"title":"性能和 isolate 组","slug":"性能和-isolate-组","link":"#性能和-isolate-组","children":[]},{"level":2,"title":"在Web的并发","slug":"在web的并发","link":"#在web的并发","children":[]}],"git":{"createdTime":1690188875000,"updatedTime":1690188875000,"contributors":[{"name":"Zzhgitup","email":"99540215+Zzhgitup@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":13.86,"words":4159},"filePathRelative":"posts/cross-platform/Flutter/concurrency.md","localizedDate":"2023年4月26日","excerpt":"<p>Dart 通过 async-await、isolate 以及一些异步类型概念（例如 <code>Future</code> 和 <code>Stream</code>）支持了并发代码编程。本篇文章会对 async-await、<code>Future</code> 和 <code>Stream</code> 进行简略的介绍，而侧重点放在 isolate 的讲解上。</p>\\n<p>在应用中，所有的 Dart 代码都在 <strong>isolate</strong> 中运行。每一个 Dart 的 isolate 都有独立的运行线程，它们无法与其他 isolate 共享可变对象。在需要进行通信的场景里，isolate 会使用消息机制。很多 Dart 应用都只使用一个 isolate，也就是 main isolate。你可以创建额外的 isolate 以便在多个处理器核心上执行并行代码。</p>","copyright":{"author":"Oragekk","license":"CC BY-NC-SA 4.0"},"autoDesc":true}');export{t as data};

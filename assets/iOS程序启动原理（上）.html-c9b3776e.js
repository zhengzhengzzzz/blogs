import{_ as c,r as o,o as s,c as h,a as i,b as e,d as n,w as t,e as a}from"./app-6d1bfb61.js";const u={},U=a('<blockquote><p>本文介绍 iOS 程序中的 Info.plist,pch 文件,UIApplication,openURL 以及 UIWindow 的常用属性及方法;</p></blockquote><h3 id="info-plist" tabindex="-1"><a class="header-anchor" href="#info-plist" aria-hidden="true">#</a> info.plist</h3><h4 id="常见设置" tabindex="-1"><a class="header-anchor" href="#常见设置" aria-hidden="true">#</a> 常见设置</h4><p>建立一个工程后,会在 Supporting files 文件夹下看到一个&quot;<em>工程名-Info.plist</em>&quot;的文件,该文件对工程做一些运行期的配置,非常重要,不能删除.<br> 在旧版 Xcode 创建的工程中,这个配置文件的名字叫做&quot;Info.plist&quot;.<br> 项目中的其他 plist 文件不能带有&quot;Info&quot;这个字眼,不然会被错认为是传说中非常重要的&quot;Info.plist&quot;.<br> 项目中还有一个&quot;InfoPlist.strings&quot;的文件(Xcode6 之后需手动添加),跟 Info.plist 文件的本地化相关.</p><h4 id="info-plist-常见属性" tabindex="-1"><a class="header-anchor" href="#info-plist-常见属性" aria-hidden="true">#</a> Info.plist 常见属性:</h4>',5),I=i("li",null,"Localiztion native development region (CFBundleDevelopmentRegion)-本地化相关;",-1),w=i("li",null,"Bundle display name(CFBundleDisplayName)-程序安装后显示的名称,限制在 10-12 个字符,如果超出,将被显示缩写名称;",-1),_=i("li",null,"Icon file(CFBundleIconFile)-app 图标名称,一般为 Icon.png;",-1),b=i("li",null,"Bundle version(CFBundleVersion)-应用程序的版本号,每次往 App Store 上发布一个新版本时,需要增加这个版本号;",-1),f=i("li",null,"Main storyboard file base name(NSMainStoryboardFile)-主 storyboard 文件名称;",-1),g=i("li",null,"Bundle identifier(CFBundleIdentifier)-项目的唯一标识,部署到真机时用到;",-1),S=i("br",null,null,-1),A=a(`<h3 id="pch-文件" tabindex="-1"><a class="header-anchor" href="#pch-文件" aria-hidden="true">#</a> pch 文件</h3><p>项目的 Supporting files 文件夹下面有个&quot;工程名-Prefix.pch&quot;文件,也是一个头文件;</p><pre><code>pch头文件的内容能被项目中的其他所有源文件共享和访问;

一般在pch头文件中定义一些全局的宏;

在pch头文件中添加下列预处理指令,然后在项目中使用Log(...)来输出日志信息,就可以在发布应用的时候,一次性将NSLog语句移除(在调试模式下,才有定义DEBUG)
    #ifdef DEBUG
    #define Log(...) NSLog(__VA_ARGS__)
    #else#define Log(...) /* */
    #endif\`\`
</code></pre><h3 id="uiapplication" tabindex="-1"><a class="header-anchor" href="#uiapplication" aria-hidden="true">#</a> UIApplication</h3><p>UIApplication 对象是应用程序的象征;<br>      每一个应用都有自己的 UIApplication 对象,而且是单例的;<br>      通过[UIApplication sharedApplication]可以获得这个单例对象;<br>      一个 iOS 程序启动后创建的第一个对象就是 UIApplication 对象;<br>      利用 UIApplication 对象,能进行一些应用级别的操作.</p><h4 id="uiapplication-的常用属性" tabindex="-1"><a class="header-anchor" href="#uiapplication-的常用属性" aria-hidden="true">#</a> UIApplication 的常用属性</h4><p>设置应用程序图标右上角的红色提醒数字:<br> @property(nonatomic) NSInteger applicationIconBadgeNumber;<br> 设置联网指示器(菊花)的可见性<br> @property(nonatomic,getter=isNetworkActivityIndicatorVisible) BOOL networkActivityIndicatorVisible;</p><h3 id="状态栏" tabindex="-1"><a class="header-anchor" href="#状态栏" aria-hidden="true">#</a> 状态栏</h3><h5 id="从-ios7-开始-系统提供了两种管理状态栏的方式" tabindex="-1"><a class="header-anchor" href="#从-ios7-开始-系统提供了两种管理状态栏的方式" aria-hidden="true">#</a> 从 iOS7 开始,系统提供了两种管理状态栏的方式:</h5><p>1.&gt;通过 UIViewController 管理(在 iOS 中,默认情况下,状态栏都是由 UIViewController 管理的):<br> 状态栏的样式:<br> - (UIStatusBarStyle)preferredStatusBarStyle;<br>   状态栏的可见性<br> - (BOOL)prefersStatusBarHidden;<br> 2.&gt;通过 UIApplication 管理(一个应用程序的状态栏都由它统一管理)<br> application.statusBarHidden = NO;</p><h4 id="openurl" tabindex="-1"><a class="header-anchor" href="#openurl" aria-hidden="true">#</a> openURL:</h4><p>UIApplication 有个功能十分强大的 openURL 方法:<br> - (BOOL)openURL:(NSURL*)url;<br> openURL:方法的部分功能有</p>`,12),m=i("li",null,[e("打电话"),i("br"),e(" UIApplication *app = [UIApplication sharedApplication];"),i("br"),e(' [app openURL:[NSURL URLWithString:@"tel://10086"]];')],-1),L=i("li",null,[e("发短信"),i("br"),e(' [app openURL:[NSURL URLWithString:@"sms://10086"]];')],-1),W=i("li",null,[e("发邮件"),i("br"),e(' [app openURL[NSURL URLWithString:@"mailto://605453790@qq.com"]];')],-1),y=i("br",null,null,-1),R={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},v=i("li",null,[e("打开其他 app 程序"),i("br"),e(' NSString *urlString = [NSString stringWithFormat:@"AppJumpSecond://%@",textField.text];'),i("br"),e(" [[UIApplication sharedApplication] openURL:[NSURL URLWithString:urlString]];")],-1),x=a(`<h3 id="uiapplication-和-delegate" tabindex="-1"><a class="header-anchor" href="#uiapplication-和-delegate" aria-hidden="true">#</a> UIApplication 和 delegate</h3><p>所有的移动操作系统都有个致命的缺点:app 很容易受到打扰.比如一个来电或者锁屏会导致 app 进入后台甚至被终止;</p><p>还有很多其他类似的情况会导致 app 受到干扰,在 app 受到干扰时,会产生一些系统事件,这时 UIApplication 会通知它的 delegate 对象,让 delegate 来处理这些系统事件.</p><p>delegate 可处理的事件包括:</p><pre><code>1&gt; 应用程序的生命周期事件(如程序的启动和关闭);

2&gt; 系统事件(如来电);

3&gt; 内存警告...
</code></pre><h4 id="uiapplicationdelegate-协议" tabindex="-1"><a class="header-anchor" href="#uiapplicationdelegate-协议" aria-hidden="true">#</a> UIApplicationDelegate 协议</h4><pre><code>// app接收到内存警告时调用
- (void)applicationDidReceiveMemoryWarning:(UIApplication *)application;
// app进入后台时调用（比如按了home键）
- (void)applicationDidEnterBackground:(UIApplication *)application;
// app启动完毕时调用
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions;
</code></pre><p>每次新建完项目,都有个带有&quot;AppDelegate&quot;字眼的类,它就是 UIApplication 的代理,<em>AppDelegate</em>默认已经遵守了<code>UIApplicationDelegate</code>协议,已经是 UIApplication 的代理;</p><h3 id="uiwindow" tabindex="-1"><a class="header-anchor" href="#uiwindow" aria-hidden="true">#</a> UIWindow</h3><p>UIWindow 是一种特殊的 UIView,通常在一个 App 中只会有一个 UIWindow;<br>     iOS 程序启动完毕后,创建的第一个视图控件就是 UIWindow,接着创建控制器的 View,最后将控制器的 view 添加到 UIWindow 上,于是控制器的 view 就显示在屏幕上了.<br>      一个程序之所以能显示在屏幕上,完全是因为它有 UIWindow,没有 UIWindow,就看不见任何 UI 界面;<br> 添加 UIView 到 UIWindow 中的两种常见方式:<br>     1&gt; 直接将 view 添加到 UIWindow 中,但并不会理会 view 对应的 UIViewController<br> - (void)addSubview:(UIView *)view;</p><p>2&gt; 自动将 rootViewController 的 view 添加到 UIWindow 中,负责管理 rootViewController 的生命周期;</p><pre><code>@property(nonatomic,retain) UIViewController *rootViewController;
</code></pre><p>常用方法:<br>   - (void)makeKeyWindow;  //让当前 UIWindow 变成 keyWindow(主窗口) <br> - (void)makeKeyAndVisible;  //让当前 UIWindow 变成 keyWindow，并显示出来</p><h4 id="uiwindow-的获得" tabindex="-1"><a class="header-anchor" href="#uiwindow-的获得" aria-hidden="true">#</a> UIWindow 的获得:</h4><pre><code>[UIApplication sharedApplication].windows
</code></pre><p>在本应用中打开的 UIWindow 列表,这样就可以接触应用中的任何一个 UIView 对象(平时输入文字弹出的键盘,就处在一个新的 UIWindow 中).</p><pre><code>[UIApplication sharedApplication].keyWindow
</code></pre><p>用来接收键盘以及非触摸类的消息事件的 UIWindow,而且程序中每时每刻只能有一个 UIWindow 是 keyWindow.如果某个 UIWindow 内部的文本框不能输入文字,可能是因为这个 UIWindow 不是 keyWindow.</p><pre><code>view.window
</code></pre><p>获得某个 UIView 所在的 UIWindow.</p>`,20);function B(N,V){const p=o("key"),r=o("true"),l=o("dict"),d=o("ExternalLinkIcon");return s(),h("div",null,[U,i("ol",null,[I,w,_,b,f,g,i("li",null,[e("额外说一下从 iOS9 开始，所有的 http 请求都改成了 https，采用 TLS 1.2 协议，目的是增强数据安全。如果不更新的话，暂时可以在 Info.plist 中声明，使用不安全的网络请求。"),S,e(" 可以在 info.plist 中添加一下字段"),n(p,null,{default:t(()=>[e("NSAppTransportSecurity")]),_:1}),n(l,null,{default:t(()=>[n(p,null,{default:t(()=>[e("NSAllowsArbitraryLoads")]),_:1}),n(r)]),_:1}),e(" 即如：![](http://upload-images.jianshu.io/upload_images/2076247-22165721d20be6ab?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) ")])]),A,i("ul",null,[m,L,W,i("li",null,[e("打开一个网页资源"),y,e(' [app openURL:[NSURL URLWithString:@"'),i("a",R,[e("http://www.baidu.com"),n(d)]),e('"]];')]),v]),x])}const O=c(u,[["render",B],["__file","iOS程序启动原理（上）.html.vue"]]);export{O as default};
